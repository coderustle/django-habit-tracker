name: Release
run-name: Release workflow

on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "Production"
      requirements:
        default: "prod"
        required: false
        type: string
      image_name:
        default: "habitstacker"
        required: false
        type: string
      target:
        default: "production"
        required: false
        type: string
      tag:
        required: false
        default: "latest"
        type: string
    secrets:
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      TENANT_ID:
        required: true
      SECRET_KEY:
        required: true
      SUBSCRIPTION_ID:
        required: true
      DOCKERHUB_TOKEN:
        required: true
      DOCKERHUB_USERNAME:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      image_name: ${{ steps.image.outputs.image }}
    env:
      DJANGO_SETTINGS_MODULE: ${{ vars.DJANGO_SETTINGS_MODULE }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ inputs.target }}
          push: true
          build-args: |
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DJANGO_SETTINGS_MODULE=${{ vars.DJANGO_SETTINGS_MODULE }}
            PYTHON_REQUIREMENTS_FILE=${{ inputs.requirements }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image_name }}:${{ inputs.tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image_name }}:${{ inputs.tag }}
          cache-to: type=inline

      - name: Set output with image name
        id: image
        run: echo "image=${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.image_name }}:${{ inputs.tag }}" >> "$GITHUB_OUTPUT"

